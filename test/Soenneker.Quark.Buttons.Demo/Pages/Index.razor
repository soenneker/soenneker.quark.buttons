@page "/"
@using Microsoft.Extensions.Logging
@using Soenneker.Quark.Dtos.Colors
@using Soenneker.Quark.Enums.ButtonTypes
@using Soenneker.Quark.Enums.ColorTypes

@inject ILogger<Index> Logger

<div class="container-fluid" >
	<div class="row" >
		<div class="col-12" >
			<img src="https://user-images.githubusercontent.com/4441470/224455560-91ed3ee7-f510-4041-a8d2-3fc093025112.png" class="mb-3" />
			<h1>Soenneker.Quark.Buttons Demo</h1>
			<p class="lead" >This page demonstrates the Quark.Buttons component with various configurations and use cases.</p>
		</div>
	</div>
</div>
<div>
	<h2>Basic Buttons</h2>
	<div class="mb-3" >
		<Button Color="Color.Primary" OnClick="HandleBasicClick" >Primary Button</Button>
		<Button Color="Color.Secondary" OnClick="HandleBasicClick" >Secondary Button</Button>
		<Button Color="Color.Success" OnClick="HandleBasicClick" >Success Button</Button>
		<Button Color="Color.Danger" OnClick="HandleBasicClick" >Danger Button</Button>
	</div>
	<p class="text-muted" >These buttons use the Color parameter instead of hardcoded CSS classes.</p>
</div>

<hr />

<div>
	<h2>Button Colors</h2>
	<div class="mb-3" >
		<Button Color="Color.Primary" OnClick="HandleBasicClick" >Primary</Button>
		<Button Color="Color.Secondary" OnClick="HandleBasicClick">Secondary</Button>
		<Button Color="Color.Success" OnClick="HandleBasicClick" >Success</Button>
		<Button Color="Color.Danger" OnClick="HandleBasicClick" >Danger</Button>
		<Button Color="Color.Warning" OnClick="HandleBasicClick" >Warning</Button>
		<Button Color="Color.Info" OnClick="HandleBasicClick" >Info</Button>
		<Button Color="Color.Light" OnClick="HandleBasicClick" >Light</Button>
		<Button Color="Color.Dark" OnClick="HandleBasicClick" >Dark</Button>
	</div>
	<div class="mb-3" >
		<h4>Colors with Different Sizes</h4>
		<Button Color="Color.Success" Size="@Size.Small" OnClick="HandleBasicClick" >Small Success</Button>
		<Button Color="Color.Danger" Size="@Size.Large" OnClick="HandleBasicClick" >Large Danger</Button>
		<Button Color="Color.Warning" Size="@Size.ExtraLarge" OnClick="HandleBasicClick" >Extra Large Warning</Button>
	</div>
</div>

<hr />

<div>
	<h2>Button Sizes</h2>
	<div class="mb-3" >
		<Button Color="Color.Primary" Size="@Size.ExtraSmall" OnClick="HandleBasicClick" >Extra Small</Button>
		<Button Color="Color.Primary" Size="@Size.Small" OnClick="HandleBasicClick" >Small</Button>
		<Button Color="Color.Primary" Size="@Size.Default" OnClick="HandleBasicClick" >Default</Button>
		<Button Color="Color.Primary" Size="@Size.Medium" OnClick="HandleBasicClick" >Medium</Button>
		<Button Color="Color.Primary" Size="@Size.Large" OnClick="HandleBasicClick" >Large</Button>
		<Button Color="Color.Primary" Size="@Size.ExtraLarge" OnClick="HandleBasicClick" >Extra Large</Button>
		<Button Color="Color.Primary" Size="@Size.ExtraExtraLarge" OnClick="HandleBasicClick" >Extra Extra Large</Button>
	</div>
	<div class="mb-3" >
		<h4>Different Styles with Small Size</h4>
		<Button Color="Color.Secondary" Size="@Size.Small" OnClick="HandleBasicClick" >Secondary Small</Button>
		<Button Color="Color.Success" Size="@Size.Small" OnClick="HandleBasicClick" >Success Small</Button>
		<Button Color="Color.Danger" Size="@Size.Small" OnClick="HandleBasicClick" >Danger Small</Button>
		<Button Color="Color.Warning" Size="@Size.Small" OnClick="HandleBasicClick" >Warning Small</Button>
	</div>
	<div class="mb-3" >
		<h4>Different Styles with Large Size</h4>
		<Button Color="Color.Secondary" Size="@Size.Large" OnClick="HandleBasicClick" >Secondary Large</Button>
		<Button Color="Color.Success" Size="@Size.Large" OnClick="HandleBasicClick" >Success Large</Button>
		<Button Color="Color.Danger" Size="@Size.Large" OnClick="HandleBasicClick" >Danger Large</Button>
		<Button Color="Color.Warning" Size="@Size.Large" OnClick="HandleBasicClick" >Warning Large</Button>
	</div>
</div>

<hr />

<div>
	<h2>Button Types</h2>
	<div class="mb-3" >
		<Button Color="Color.Primary" Type="@ButtonType.Link" OnClick="HandleBasicClick" >Link Type</Button>
		<Button Color="Color.Secondary" Type="@ButtonType.Submit" OnClick="HandleBasicClick" >Submit Type</Button>
		<Button Color="Color.Warning" Type="@ButtonType.Reset" OnClick="HandleBasicClick" >Reset Type</Button>
		<Button Color="Color.Info" Type="@ButtonType.Button" OnClick="HandleBasicClick" >Button Type</Button>
	</div>
	<p class="text-muted" >All button types now use the Type parameter with ButtonType enum values.</p>
</div>

<hr />

<div>
	<h2>Disabled Buttons</h2>
	<div class="mb-3" >
		<Button Color="Color.Primary" Disabled >Disabled Primary (HTML-style)</Button>
		<Button Color="Color.Secondary" Disabled="@true" >Disabled Secondary (explicit true)</Button>
		<Button Color="Color.Success" Disabled="@false" >Enabled Success (explicit false)</Button>
		<Button Color="Color.Info" >Enabled Info (no disabled attribute)</Button>
	</div>
</div>

<hr />

<div>
	<h2>Loading Buttons</h2>
	<div class="mb-3" >
		<Button Color="Color.Primary" Loading="isLoading" OnClick="HandleLoadingClick" >
			Click to Load
		</Button>
		<Button Color="Color.Success" Loading="isLoading2" OnClick="HandleLoadingClick2" >
			Process Data
		</Button>
		<Button Color="Color.Info" Loading="isLoading3" OnClick="HandleLoadingClick3" >
			Custom Loading
		</Button>
	</div>
</div>

<hr />

<div>
	<h2>Button with Custom Loading Template</h2>
	<div class="mb-3" >
		<Button Color="Color.Warning" Loading="isLoading4" OnClick="HandleLoadingClick4" LoadingTemplate="@CustomLoadingTemplate" >
			Custom Template
		</Button>
	</div>
</div>

<hr />

<div>
	<h2>Button Attributes</h2>
	<div class="mb-3" >
		<Button Color="Color.Dark" Name="testButton" Value="testValue" OnClick="HandleBasicClick" >Named Button</Button>
		<Button Color="Color.Light" AutoFocus="true" OnClick="HandleBasicClick" >Auto Focus</Button>
	</div>
</div>

<hr />

<div>
	<h2>Click Events</h2>
	<div class="mb-3" >
		<Button Color="Color.Primary" OnClick="HandleClickWithData" >Click Counter: @clickCount</Button>
		<p class="text-muted" >Last clicked at: @lastClickTime</p>
	</div>
</div>

@code {
	private bool isLoading = false;
	private bool isLoading2 = false;
	private bool isLoading3 = false;
	private bool isLoading4 = false;
	private int clickCount = 0;
	private string lastClickTime = "";

	private RenderFragment CustomLoadingTemplate => @<div>
		                                                <span class="spinner-grow spinner-grow-sm me-2" role="status" aria-hidden="true" ></span>
		                                                <span class="text-warning" >Custom Loading...</span>
	                                                </div>;

	private async Task HandleBasicClick(MouseEventArgs args)
	{
		Logger.LogInformation("Basic button clicked");
		await Task.CompletedTask;
	}

	private async Task HandleLoadingClick(MouseEventArgs args)
	{
		isLoading = true;
		StateHasChanged();

		// Simulate async operation
		await Task.Delay(3000);

		isLoading = false;
		StateHasChanged();
	}

	private async Task HandleLoadingClick2(MouseEventArgs args)
	{
		isLoading2 = true;
		StateHasChanged();

		// Simulate async operation
		await Task.Delay(2000);

		isLoading2 = false;
		StateHasChanged();
	}

	private async Task HandleLoadingClick3(MouseEventArgs args)
	{
		isLoading3 = true;
		StateHasChanged();

		// Simulate async operation
		await Task.Delay(2500);

		isLoading3 = false;
		StateHasChanged();
	}

	private async Task HandleLoadingClick4(MouseEventArgs args)
	{
		isLoading4 = true;
		StateHasChanged();

		// Simulate async operation
		await Task.Delay(4000);

		isLoading4 = false;
		StateHasChanged();
	}

	private async Task HandleClickWithData(MouseEventArgs args)
	{
		clickCount++;
		lastClickTime = DateTime.Now.ToString("HH:mm:ss");
		await Task.CompletedTask; // Ensure async method completes properly
	}

	protected override void OnInitialized()
	{
	}

}