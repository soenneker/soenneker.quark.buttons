@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Routing
@using Soenneker.Extensions.String
@using Soenneker.Quark.Buttons.Enums
@inherits Soenneker.Quark.Components.Element
@inject NavigationManager Navigation

@if (Type == ButtonType.Link)
{
	<NavLink href="@To" @attributes="BuildAttributes()">
			@ChildContent
	</NavLink>
}
else
{
	<button @attributes="BuildAttributes()" @onclick="HandleClick">
		@if (Loading)
		{
			<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
		}
		@if (LoadingTemplate != null && Loading)
		{
			@LoadingTemplate
		}
		else
		{
			@ChildContent
		}
	</button>
}

@code {
	[Parameter]
	public ButtonType Type { get; set; } = ButtonType.Button;

	[Parameter]
	public bool Disabled { get; set; }

	[Parameter]
	public bool Loading { get; set; }

	[Parameter]
	public RenderFragment? LoadingTemplate { get; set; }

	[Parameter]
	public string? Value { get; set; }

	[Parameter]
	public string? Name { get; set; }

	[Parameter]
	public string? Form { get; set; }

	[Parameter]
	public bool AutoFocus { get; set; }

	[Parameter]
	public string? To { get; set; }

	protected override Dictionary<string, object> BuildAttributes()
	{
		Dictionary<string, object> attributes = base.BuildAttributes();

		// Remove onclick attribute since we handle it directly on the element
		attributes.Remove("onclick");

		// Add default Bootstrap button classes if no class is specified
		if (Class.IsNullOrEmpty())
		{
			attributes["class"] = AppendToClass(attributes.GetValueOrDefault("class")?.ToString(), "btn btn-primary");
		}

		// Only add type attribute for button elements, not anchor elements
		if (!To.HasContent())
		{
			attributes["type"] = Type.Value;
		}

		// Check if disabled attribute was passed without a value (HTML-style boolean attribute)
		bool isDisabled = Disabled || Loading;
		if (Attributes != null && Attributes.ContainsKey("disabled"))
		{
			// If disabled attribute was passed, treat it as true regardless of the Disabled parameter value
			isDisabled = true;
		}

		if (isDisabled)
			attributes["disabled"] = true;

		if (Value.HasContent())
			attributes["value"] = Value;

		if (Name.HasContent())
			attributes["name"] = Name;

		if (Form.HasContent())
			attributes["form"] = Form;

		if (AutoFocus)
			attributes["autofocus"] = true;

		if (To.HasContent())
		{
			attributes["role"] = "button";
		}

		return attributes;
	}

	protected override async Task HandleClick(MouseEventArgs args)
	{
		// Check if disabled attribute was passed without a value (HTML-style boolean attribute)
		bool isDisabled = Disabled || Loading;
		if (Attributes != null && Attributes.ContainsKey("disabled"))
		{
			// If disabled attribute was passed, treat it as true regardless of the Disabled parameter value
			isDisabled = true;
		}

		if (!isDisabled)
		{
			// Handle programmatic navigation if To is set but we're not using NavLink
			if (To.HasContent() && !To.StartsWith("#"))
			{
				Navigation.NavigateTo(To);
			}
			
			await base.HandleClick(args);
		}
	}
}